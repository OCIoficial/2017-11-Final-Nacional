# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st1.cpp]
  # Random tests
  # Rand params: n    | k    | minX | maxX | minY | maxY
  3 ; gen_random.py 0      1      0      0      0      0
  3 ; gen_random.py 0      2      0      0      0      0
  3 ; gen_random.py 0      3      0      0      0      0
  3 ; gen_random.py 0      4      0      0      0      0
  3 ; gen_random.py 0      5      0      0      0      0
  3 ; gen_random.py 0      6      0      0      0      0
  3 ; gen_random.py 0      7      0      0      0      0
  3 ; gen_random.py 0      8      0      0      0      0
  3 ; gen_random.py 0      9      0      0      0      0
  3 ; gen_random.py 0     10      0      0      0      0

[Subtask 2 - validators/st2.cpp]
  # Random tests
  # Rand params: n     | k     | minX | maxX | minY | maxY
  1 ; copy attic/manual-1.txt
  # 3 ; gen_random.py 6      1      1      3      1      3
  3 ; gen_random.py 7      1      1      3      1      3
  3 ; gen_random.py 8      1      1      3      1      3
  # 3 ; gen_random.py 9      1      1      4      1      4
  # 3 ; gen_random.py 10     1      1      4      1      4
  3 ; gen_random.py 6      2      1      3      1      3
  # 3 ; gen_random.py 7      2      1      3      1      3
  3 ; gen_random.py 8      2      1      3      1      3
  # 3 ; gen_random.py 9      2      1      4      1      4
  3 ; gen_random.py 10     2      1      4      1      4
  3 ; gen_random.py 6      3      1      3      1      3
  3 ; gen_random.py 7      3      1      3      1      3
  # 3 ; gen_random.py 8      3      1      3      1      3
  3 ; gen_random.py 9      3      1      4      1      4
  # 3 ; gen_random.py 10     3      1      4      1      4
  3 ; gen_random.py 10      4      1      2      1      2
  3 ; gen_random.py 10      4      1      3      1      3
  3 ; gen_random.py 10      4      1      3      1      3
  3 ; gen_random.py 10      4      1      4      1      4
  3 ; gen_random.py 10      4      1      4      1      4
  3 ; gen_random.py 6      5      1      3      1      3
  # 3 ; gen_random.py 7      5      1      3      1      3
  3 ; gen_random.py 8      5      1      3      1      3
  3 ; gen_random.py 9      5      1      4      1      4
  # 3 ; gen_random.py 10     5      1      4      1      4
  3 ; gen_random.py 6      6      1      3      1      3
  3 ; gen_random.py 7      6      1      3      1      3
  # 3 ; gen_random.py 8      6      1      3      1      3
  3 ; gen_random.py 9      6      1      4      1      4
  3 ; gen_random.py 10     6      1      4      1      4
  # 3 ; gen_random.py 6      7      1      3      1      3
  # 3 ; gen_random.py 7      7      1      3      1      3
  3 ; gen_random.py 8      7      1      3      1      3
  # 3 ; gen_random.py 9      7      1      4      1      4
  3 ; gen_random.py 10     7      1      4      1      4
  3 ; gen_random.py 6      8      1      3      1      3
  # 3 ; gen_random.py 7      8      1      3      1      3
  3 ; gen_random.py 8      8      1      3      1      3
  3 ; gen_random.py 9      8      1      4      1      4
  # 3 ; gen_random.py 10     8      1      4      1      4
  3 ; gen_random.py 6      9      1      3      1      3
  # 3 ; gen_random.py 7      9      1      3      1      3
  3 ; gen_random.py 8      9      1      3      1      3
  3 ; gen_random.py 9      9      1      4      1      4
  # 3 ; gen_random.py 10     9      1      4      1      4
  3 ; gen_random.py 4      10      1      3      1      3
  3 ; gen_random.py 5      10      1      3      1      3
  3 ; gen_random.py 6      10      1      3      1      3
  3 ; gen_random.py 7      10      1      4      1      4
  3 ; gen_random.py 10     10      1      4      1      4

[Subtask 3 - validators/st3.cpp]
  # Random tests
  # Rand params: n     | k     | minX      | maxX      | minY | maxY 
  3 ; gen_random.py 100   4001    6         30          6       30
  3 ; gen_random.py 100   4011    6         30          6       30
  3 ; gen_random.py 100   4021    6         30          6       30
  3 ; gen_random.py 100   4031    6         30          6       30
  3 ; gen_random.py 100   4041    6         30          6       30
  3 ; gen_random.py 100   4051    6         30          6       30
  3 ; gen_random.py 100   4061    6         30          6       30
  3 ; gen_random.py 100   4071    6         30          6       30
  3 ; gen_random.py 100   4081    6         30          6       30
  3 ; gen_random.py 100   4091    6         30          6       30
  3 ; gen_random.py 100   4500    6         30          6       30
  3 ; gen_random.py 100   4500    6         30          6       30
  3 ; gen_random.py 100   5000    6         30          6       30
  3 ; gen_random.py 100   3408    6         30          6       30
  3 ; gen_random.py 100   3624    6         30          6       30
  3 ; gen_random.py 100   3852    6         30          6       30
  3 ; gen_random.py 100   4052    6         30          6       30
  3 ; gen_random.py 100   4292    6         30          6       30
  3 ; gen_random.py 100   4512    6         30          6       30
  3 ; gen_random.py 100   4776    6         30          6       30

[Subtask 4 - validators/st4.cpp]
  # Random tests
  # Rand params: n     | k     | minX      | maxX      | minY      | maxY 
  3 ; gen_random.py 10000   9000000000    10000    75000    10000    75000         
  3 ; gen_random.py 10000   9000000011    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000021    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000031    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000041    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000051    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000061    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000071    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000081    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000091    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000500    10000    75000    10000    75000 
  3 ; gen_random.py 10000   9000000500    10000    75000    10000    75000 
  3 ; gen_random.py 10000   10000000000   10000    75000    10000    75000 
  3 ; gen_random.py 10000   10000000000   10000    75000    10000    75000
  3 ; gen_random.py 0       10000000000   10000    75000    10000    75000 
  3 ; gen_random.py 0       9000060000    10000    75000    10000    75000 
  3 ; gen_random.py 0       9000030000    10000    75000    10000    75000 
  3 ; gen_random.py 0       8000050000    10000    75000    10000    75000 


