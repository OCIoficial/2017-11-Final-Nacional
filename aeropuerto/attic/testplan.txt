# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in

  # Random tests        n c a
  2 ; generator_line.py 5 0 1
  2 ; generator_line.py 2 0 0
  2 ; generator_line.py 5 0 0
  2 ; generator_line.py 10 0 0
  2 ; generator_line.py 100 0 0
  2 ; generator_line.py 1000 0 0


[Subtask 2 - validators/st2.cpp]
  # Use sample data as test
  1 ; copy statement/sample-2.in

  # Random tests        n c a
  2 ; generator_line.py 2 3 1
  2 ; generator_line.py 2 1 0
  2 ; generator_line.py 2 2 0
  2 ; generator_line.py 2 3 0
  2 ; generator_line.py 2 4 0
  2 ; generator_line.py 10 3 0
  2 ; generator_line.py 20 3 0
  2 ; generator_line.py 50 2 0
  2 ; generator_line.py 50 3 0
  2 ; generator_line.py 50 4 0
  2 ; generator_line.py 100 3 0
  2 ; generator_line.py 200 3 0
  2 ; generator_line.py 500 3 0
  2 ; generator_line.py 1000 3 0
  2 ; generator_line.py 1000 4 0


[Subtask 3 - validators/st3.cpp]
  # Use sample data as test
  1 ; copy statement/sample-3.in

  # Random tests   n m p t
  2 ; generator.py 5 4 0 0
  2 ; generator.py 10 9 0 0
  2 ; generator.py 100 99 0 0
  2 ; generator.py 1000 999 0 0
  2 ; generator.py 10 18 0 0
  2 ; generator.py 100 198 0 0
  2 ; generator.py 1000 1998 0 0
  2 ; generator.py 10 25 0 0
  2 ; generator.py 100 500 0 0
  2 ; generator.py 1000 10000 0 0
  2 ; generator.py 10 45 0 0
  2 ; generator.py 32 496 0 0
  2 ; generator.py 100 4949 0 0


[Subtask 4 - validators/st4.cpp]
  # Use sample data as test
  1 ; copy statement/sample-4.in

  # Random tests   n m p t
  2 ; generator.py 20 19 400 8000
  2 ; generator.py 100 99 10000 40000
  2 ; generator.py 1000 999 10000 400000
  2 ; generator.py 10 9 100 1000
  2 ; generator.py 100 99 1000 10000
  2 ; generator.py 1000 999 10000 100000
  2 ; generator.py 10 23 230 4000
  2 ; generator.py 32 160 1600 12000
  2 ; generator.py 100 1000 10000 40000
  2 ; generator.py 200 10000 10000 1000000000

